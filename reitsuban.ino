#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_HMC5883_U.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire);		// create new 128x64 display object
Adafruit_HMC5883_Unified mag = Adafruit_HMC5883_Unified(12345);		// create new HMC5883 object

const int bufferSize = 20;          // we want the last 20 ghost letters
char buffer[bufferSize + 1] = {0};  // +1 for null terminator; 
unsigned long start_time, current_time;           // for timing
int delta_time;
int delay_time = 100;

const char alphabet[] = "abcdefghijklmnopqrstuvwxyz ";

// Define the splash screen bitmap here
const unsigned char splashScreen[] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff,
	0xff, 0xfe, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xf7, 0xc0, 0x00, 0x3f, 0xff, 0x9f, 0xe0, 0x3f,
	0xff, 0xf8, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xe3, 0xc0, 0x00, 0x0f, 0xff, 0x9f, 0xe0, 0x3f,
	0xff, 0xe0, 0x00, 0x1f, 0xff, 0xf8, 0xff, 0xff, 0xe1, 0xc0, 0x00, 0x3f, 0xf8, 0x01, 0xe7, 0x3f,
	0xff, 0xc0, 0x00, 0x0f, 0xff, 0xf8, 0xff, 0xff, 0xf0, 0xfe, 0xf8, 0x7f, 0xf8, 0x01, 0xe7, 0x3f,
	0xff, 0x80, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x7c, 0x01, 0xff, 0xf9, 0x39, 0xe7, 0x39,
	0xff, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0xfc, 0x03, 0xff, 0xf9, 0x99, 0xc7, 0x31,
	0xff, 0x00, 0x00, 0x03, 0x1f, 0xf8, 0xff, 0x8f, 0xff, 0xff, 0x81, 0xff, 0xf9, 0x99, 0xcf, 0x01,
	0xff, 0x00, 0x00, 0x01, 0x1f, 0xf8, 0xff, 0x8f, 0xff, 0xff, 0xe3, 0xff, 0xf9, 0xf8, 0x4f, 0xc3,
	0xfe, 0x00, 0x00, 0x01, 0x10, 0x08, 0x80, 0x8f, 0xff, 0xc0, 0x00, 0x0f, 0x80, 0x00, 0x7f, 0xff,
	0xfe, 0x00, 0x00, 0x01, 0x10, 0x08, 0x80, 0x8f, 0xff, 0xc0, 0x00, 0x0f, 0xc0, 0x09, 0x80, 0x0f,
	0xfe, 0x00, 0x00, 0x01, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xc7, 0x8f, 0x8f, 0xd9, 0x99, 0x80, 0x07,
	0xfe, 0x00, 0x00, 0x01, 0xf0, 0x08, 0x80, 0xff, 0xff, 0xc7, 0x8f, 0x8f, 0xf9, 0x99, 0xe7, 0x8f,
	0xfe, 0x00, 0x00, 0x01, 0xf0, 0x08, 0x80, 0xff, 0x81, 0xc0, 0x00, 0x0f, 0xf9, 0x99, 0xf3, 0x1f,
	0xfe, 0x0f, 0x03, 0xc1, 0xff, 0xf8, 0xff, 0xff, 0x81, 0xc0, 0x00, 0x0f, 0xf9, 0x99, 0xf8, 0x3f,
	0xff, 0x0f, 0x83, 0xe1, 0xff, 0xff, 0xff, 0xff, 0x81, 0xc7, 0x8f, 0x8f, 0xf1, 0x99, 0xf8, 0x7f,
	0xff, 0x1f, 0x87, 0xe3, 0xf0, 0x00, 0x00, 0x7f, 0xf1, 0xc7, 0x8f, 0x8f, 0xf3, 0xf9, 0xc0, 0x07,
	0xff, 0x1f, 0x87, 0xe3, 0xf0, 0x00, 0x00, 0x7f, 0xf1, 0xc7, 0x8f, 0x8f, 0xe3, 0xe1, 0x03, 0x01,
	0xff, 0x9f, 0x87, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xc0, 0x00, 0x0f, 0xc7, 0xe3, 0x9f, 0xe1,
	0xff, 0x8f, 0x83, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xc0, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x1f,
	0xff, 0xcf, 0x03, 0xc7, 0x80, 0x00, 0x00, 0x1f, 0xf1, 0xc7, 0x8f, 0x8f, 0xfc, 0x00, 0x00, 0x1f,
	0xff, 0xc0, 0x10, 0x07, 0x80, 0x00, 0x00, 0x1f, 0xf1, 0xc7, 0x8f, 0x8f, 0xfc, 0xf3, 0xcf, 0x9f,
	0xff, 0xc0, 0x38, 0x0f, 0xf9, 0xe7, 0x3c, 0xff, 0xf1, 0xc7, 0x8f, 0x8f, 0xfc, 0xf3, 0xcf, 0x9f,
	0xff, 0xc0, 0x78, 0x0f, 0xf1, 0xe7, 0x3c, 0x7f, 0xf1, 0xc7, 0x8e, 0x0f, 0xfc, 0xf3, 0xcf, 0x9f,
	0xff, 0xe0, 0x78, 0x1f, 0xf8, 0xe7, 0x38, 0xff, 0xf0, 0xc7, 0x8e, 0x1f, 0xfc, 0xf3, 0xcf, 0x9f,
	0xff, 0xf8, 0x00, 0x7f, 0xf8, 0xe7, 0x38, 0xff, 0xe0, 0x7f, 0xfe, 0x1f, 0xfc, 0xf3, 0xcf, 0x9f,
	0xff, 0xfe, 0x01, 0xff, 0xfd, 0xe7, 0x3d, 0xff, 0x82, 0x00, 0x00, 0x03, 0xfc, 0xf3, 0xcf, 0x9f,
	0xff, 0xfb, 0x01, 0x7f, 0x00, 0x00, 0x00, 0x07, 0x87, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x01,
	0xff, 0xf9, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x07, 0x8f, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x01,
	0xff, 0xf9, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xf8, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xe3, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xc1, 0xff, 0x87, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xc0, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xe0, 0x7f, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xe0, 0x3f, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xc0, 0x07, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x80, 0x01, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xc7, 0x80, 0x78, 0x07, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xf0, 0x00, 0x1f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0x9c, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff,
	0xff, 0xfe, 0x01, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0x9c, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff,
	0xff, 0xf8, 0x00, 0x7f, 0xff, 0xe7, 0x8f, 0xff, 0xfc, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff,
	0xff, 0xf0, 0x30, 0x1f, 0xff, 0xe7, 0xcf, 0x0f, 0x98, 0x08, 0x1c, 0xf3, 0x90, 0xf0, 0x3e, 0x43,
	0xff, 0xc0, 0xfc, 0x0f, 0xff, 0xe7, 0xcc, 0x03, 0x98, 0x00, 0x0c, 0xf3, 0x80, 0x70, 0x1e, 0x03,
	0xff, 0x81, 0xff, 0x03, 0xff, 0xe7, 0x98, 0xf3, 0x9c, 0xf3, 0xec, 0xf3, 0x9e, 0x7f, 0xce, 0x31,
	0xf0, 0x07, 0xff, 0x80, 0x3f, 0xe0, 0x19, 0xf9, 0x9c, 0xf3, 0xfc, 0xf3, 0x9f, 0x38, 0x0e, 0x79,
	0xc0, 0x0f, 0xff, 0xc0, 0x0f, 0xe0, 0x78, 0x01, 0x9c, 0xf0, 0x7c, 0xf3, 0x9f, 0x30, 0x0e, 0x79,
	0x80, 0x1f, 0xff, 0xe0, 0x0f, 0xe6, 0x38, 0x01, 0x9c, 0xfc, 0x1c, 0xf3, 0x9f, 0x23, 0xce, 0x79,
	0x80, 0x3f, 0xff, 0xf0, 0x0f, 0xe7, 0x19, 0xff, 0x9c, 0xff, 0xcc, 0xf3, 0x9e, 0x27, 0xce, 0x79,
	0x80, 0x3f, 0xff, 0xf0, 0x1f, 0xe7, 0x88, 0xfd, 0x9c, 0xf7, 0xcc, 0xe3, 0x9e, 0x67, 0x8e, 0x79,
	0xc0, 0x3f, 0xff, 0xf8, 0x7f, 0xe7, 0xcc, 0x01, 0x9c, 0x00, 0x1c, 0x03, 0x80, 0x60, 0x0e, 0x79,
	0xfc, 0x7f, 0xff, 0xfc, 0xff, 0xe7, 0xe7, 0x03, 0x9e, 0x08, 0x3e, 0x13, 0x81, 0xf0, 0xce, 0x79,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

// Define the letters bitmap here
const unsigned char letters[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x03, 0xc0, 0x1f, 0x00, 0x3c, 0x01, 0xf0, 0x07, 0xe0, 0x1f, 0x80, 0x3e, 0x01, 0x98, 0x03, 0xc0,
	0x06, 0x60, 0x19, 0x80, 0x66, 0x01, 0x98, 0x06, 0x00, 0x18, 0x00, 0x60, 0x01, 0x98, 0x01, 0x80,
	0x07, 0xe0, 0x1f, 0x00, 0x60, 0x01, 0x98, 0x07, 0x80, 0x1e, 0x00, 0x6e, 0x01, 0xf8, 0x01, 0x80,
	0x07, 0xe0, 0x1f, 0x80, 0x60, 0x01, 0x98, 0x07, 0x80, 0x1e, 0x00, 0x6e, 0x01, 0xf8, 0x01, 0x80,
	0x06, 0x60, 0x19, 0x80, 0x60, 0x01, 0x98, 0x06, 0x00, 0x18, 0x00, 0x66, 0x01, 0x98, 0x01, 0x80,
	0x06, 0x60, 0x19, 0x80, 0x66, 0x01, 0x98, 0x06, 0x00, 0x18, 0x00, 0x66, 0x01, 0x98, 0x01, 0x80,
	0x06, 0x60, 0x1f, 0x80, 0x7e, 0x01, 0xf8, 0x07, 0xe0, 0x18, 0x00, 0x7e, 0x01, 0x98, 0x03, 0xc0,
	0x06, 0x60, 0x1f, 0x00, 0x3c, 0x01, 0xf0, 0x07, 0xe0, 0x18, 0x00, 0x3c, 0x01, 0x98, 0x03, 0xc0,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x60, 0x19, 0x80, 0x60, 0x01, 0x98, 0x06, 0x60, 0x0f, 0x00, 0x7c, 0x00, 0xf0, 0x07, 0xc0,
	0x00, 0x60, 0x1b, 0x00, 0x60, 0x01, 0xf8, 0x07, 0x60, 0x19, 0x80, 0x66, 0x01, 0x98, 0x06, 0x60,
	0x00, 0x60, 0x1e, 0x00, 0x60, 0x01, 0xf8, 0x07, 0xe0, 0x19, 0x80, 0x7c, 0x01, 0x98, 0x07, 0xc0,
	0x00, 0x60, 0x1f, 0x00, 0x60, 0x01, 0xf8, 0x07, 0xe0, 0x19, 0x80, 0x7c, 0x01, 0x98, 0x07, 0xe0,
	0x00, 0x60, 0x1b, 0x80, 0x60, 0x01, 0x98, 0x06, 0xe0, 0x19, 0x80, 0x60, 0x01, 0x98, 0x06, 0x60,
	0x06, 0x60, 0x19, 0x80, 0x60, 0x01, 0x98, 0x06, 0x60, 0x19, 0x80, 0x60, 0x01, 0xb8, 0x06, 0x60,
	0x07, 0xe0, 0x19, 0x80, 0x7e, 0x01, 0x98, 0x06, 0x60, 0x1f, 0x80, 0x60, 0x01, 0xf8, 0x06, 0x60,
	0x03, 0xc0, 0x19, 0x80, 0x7e, 0x01, 0x98, 0x06, 0x60, 0x0f, 0x00, 0x60, 0x00, 0xf8, 0x06, 0x60,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x03, 0xe0, 0x1f, 0x80, 0x66, 0x01, 0x98, 0x06, 0x60, 0x19, 0x80, 0x66, 0x01, 0xf8, 0x00, 0x00,
	0x06, 0x00, 0x06, 0x00, 0x66, 0x01, 0x98, 0x06, 0x60, 0x0f, 0x00, 0x3c, 0x00, 0x18, 0x00, 0x00,
	0x03, 0xc0, 0x06, 0x00, 0x66, 0x01, 0x98, 0x06, 0x60, 0x06, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00,
	0x03, 0xe0, 0x06, 0x00, 0x66, 0x01, 0x98, 0x06, 0x60, 0x0f, 0x00, 0x18, 0x00, 0x70, 0x00, 0x00,
	0x00, 0x60, 0x06, 0x00, 0x66, 0x01, 0xf8, 0x07, 0xe0, 0x1f, 0x80, 0x18, 0x00, 0xe0, 0x00, 0x00,
	0x06, 0x60, 0x06, 0x00, 0x66, 0x00, 0xf0, 0x07, 0xe0, 0x19, 0x80, 0x18, 0x01, 0xc0, 0x00, 0x00,
	0x07, 0xe0, 0x06, 0x00, 0x7e, 0x00, 0xf0, 0x07, 0xe0, 0x19, 0x80, 0x18, 0x01, 0xf8, 0x00, 0x00,
	0x03, 0xc0, 0x06, 0x00, 0x3c, 0x00, 0x60, 0x06, 0x60, 0x19, 0x80, 0x18, 0x01, 0xf8, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

struct MagneticReading
{
	float x, y, z;
};

MagneticReading prevReading = {0, 0, 0};

// ---------------------------------------------------------------------------------

void setup()
{

	// Initialize the buffer with spaces cause
	for (int i = 0; i < bufferSize; i++)
	{
		buffer[i] = ' ';
	}
	buffer[bufferSize + 1] = '\0'; // Null-terminate the buffer


	// wait for display to initialize
	if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
	{
		for (;;)
			;
	}

	// wait for magnetometer to initialize
	if (!mag.begin())
	{
		for (;;)
			;
	}

	drawSplashScreen();	// this is the only time we draw the splash screen
	drawLetters();		// this is the only time we draw the letters bitmap

	sensors_event_t event;
	mag.getEvent(&event);
	prevReading = {event.magnetic.x, event.magnetic.y, event.magnetic.z}; // initialize prevReading
}

void drawSplashScreen() // this outputs the splashscreen one time
{
	display.clearDisplay();
	display.drawBitmap(0, 0, splashScreen, 128, 64, 1);
	display.display();
	delay(2000);
}

void drawLetters() // this outputs the letters bitmap one time
{
	display.clearDisplay();
	display.drawBitmap(0, 0, letters, 128, 64, 1);
	display.display();
}

void drawBox(int rowIndex, int columnIndex, bool invertToggle) // this draws the box around letters
{
	int x = columnIndex * 14 + 4; // box is 14 pixels wide * letter we are on + 4 pixel margin from top
	int y = rowIndex * 16 + 4;    // box is 16 pixels tall * row we are on + 4 pixel margin from left
	display.drawRect(x - 3, y - 3, 14, 16, invertToggle ? SSD1306_WHITE : SSD1306_BLACK); // draw box with 1 pixel padding around letter
	display.display();                                                                    // update the display each time we draw a box (?)
}

// yah its kinda dumb i gotta call with rowIndex and columnIndex but I wanted to flash the box
// probably a delay would work just as well. pause on that letter for effect
void querySpirit(char currentLetter, int letterIndex, int threshold = 13, int rowIndex = 0, int columnIndex = 0)
{
	// get new reading
	sensors_event_t event;
	mag.getEvent(&event);

	// calculate differnce between current and previous reading
	float delta = abs(event.magnetic.x - prevReading.x) + abs(event.magnetic.y - prevReading.y) + abs(event.magnetic.z - prevReading.z);

	if (delta > threshold)	// if current reading is more than threshold away from previous reading
	{
		memmove(buffer, buffer + 1, bufferSize - 1);      // Shift the buffer left
		buffer[bufferSize - 1] = currentLetter;           // Add the current letter at the end
		buffer[bufferSize] = '\0';                        // Null-terminate the buffer
		display.fillRect(0, 50, 128, 14, SSD1306_BLACK);  // Clear the display area for the buffer
		display.setTextSize(1);                           // Normal 1:1 pixel scale
		display.setTextColor(SSD1306_WHITE);              // Draw white text
		display.setCursor(4, 52);                         // set at bottom left of screen
		display.print(buffer);                            // print the buffer
		display.display();                                // update the display

		for (int i = 0; i < 13; i++) 					            // flash the box and be annoying
		{
			drawBox(rowIndex, columnIndex, false);
			drawBox(rowIndex, columnIndex, true);
		}
	}

	// Update previous reading
	prevReading = {event.magnetic.x, event.magnetic.y, event.magnetic.z};
}


void loop()
{
  start_time = millis();					        
	int letterIndex = 0;																                            // reset letterIndex
	for (int rowIndex = 0; rowIndex < 3; rowIndex++) { 									            // 3 rows
		for (int columnIndex = 0; columnIndex < 9; columnIndex++) {                   // 9 columns
			drawBox(rowIndex, columnIndex, true); 										                  // draw the box around the letter
			querySpirit(alphabet[letterIndex], letterIndex, 13, rowIndex, columnIndex); // 13 is the threshold for a new reading
      current_time = millis();                                                    // gets current time
      delta_time = current_time - start_time;                                     // subtracts start_time to get delta
      delay(delay_time - delta_time);                                             // subtract delta_time from delay_time to get actual delay and do it
      start_time = millis();                                                      // looks odd spot to start our time, but this is 1 loop, and it lets us pause erasing the box
			drawBox(rowIndex, columnIndex, false);										                  // erase the box around the letter
			letterIndex++;                                                              // increment letterIndex
 												                              
		}
	}
}
